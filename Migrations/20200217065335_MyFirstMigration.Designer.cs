// <auto-generated />
using System;
using LSSCBackEnd.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LSSCBackEnd.Migrations
{
    [DbContext(typeof(lsscPortalContext))]
    [Migration("20200217065335_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LSSCBackEnd.Models.TblAssessmentBatch", b =>
                {
                    b.Property<int>("AsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("asId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AsAssesmentEndtDate")
                        .HasColumnName("asAssesmentEndtDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("AsAssesmentStartDate")
                        .HasColumnName("asAssesmentStartDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("AsAssessmentEndTime")
                        .HasColumnName("asAssessmentEndTime");

                    b.Property<TimeSpan?>("AsAssessmentStartTime")
                        .HasColumnName("asAssessmentStartTime");

                    b.Property<bool?>("AsBangla")
                        .HasColumnName("asBangla");

                    b.Property<string>("AsCenterId")
                        .IsRequired()
                        .HasColumnName("asCenterId")
                        .HasMaxLength(20);

                    b.Property<string>("AsCity")
                        .IsRequired()
                        .HasColumnName("asCity")
                        .HasMaxLength(30);

                    b.Property<string>("AsContactPerson")
                        .HasColumnName("asContactPerson")
                        .HasMaxLength(40);

                    b.Property<string>("AsContactPersonEmailId")
                        .HasColumnName("asContactPersonEmailId")
                        .HasMaxLength(40);

                    b.Property<long?>("AsContactPersonPhoneNo")
                        .HasColumnName("asContactPersonPhoneNo");

                    b.Property<bool?>("AsEnglish")
                        .HasColumnName("asEnglish");

                    b.Property<string>("AsFacilitator")
                        .IsRequired()
                        .HasColumnName("asFacilitator")
                        .HasMaxLength(30);

                    b.Property<bool?>("AsHindi")
                        .HasColumnName("asHindi");

                    b.Property<string>("AsPartner")
                        .IsRequired()
                        .HasColumnName("asPartner")
                        .HasMaxLength(40);

                    b.Property<string>("AsProjectId")
                        .IsRequired()
                        .HasColumnName("asProjectId")
                        .HasMaxLength(20);

                    b.Property<string>("AsQpId")
                        .IsRequired()
                        .HasColumnName("asQpId")
                        .HasMaxLength(100);

                    b.Property<string>("AsQuestionBankId")
                        .IsRequired()
                        .HasColumnName("asQuestionBankID")
                        .HasMaxLength(12);

                    b.Property<string>("AsQuestionVersion")
                        .IsRequired()
                        .HasColumnName("asQuestionVersion")
                        .HasMaxLength(12);

                    b.Property<string>("AsRemarks")
                        .HasColumnName("asRemarks")
                        .HasMaxLength(100);

                    b.Property<string>("AsSdmsbatchName")
                        .IsRequired()
                        .HasColumnName("asSDMSBatchName")
                        .HasMaxLength(20);

                    b.Property<string>("AsState")
                        .IsRequired()
                        .HasColumnName("asState")
                        .HasMaxLength(30);

                    b.Property<bool?>("AsTamil")
                        .HasColumnName("asTamil");

                    b.Property<DateTime>("AsTrainingEndDate")
                        .HasColumnName("asTrainingEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("AsTrainingStartDate")
                        .HasColumnName("asTrainingStartDate")
                        .HasColumnType("date");

                    b.Property<string>("AsType")
                        .IsRequired()
                        .HasColumnName("asType")
                        .HasMaxLength(20);

                    b.HasKey("AsId");

                    b.HasIndex("AsCenterId");

                    b.HasIndex("AsProjectId");

                    b.HasIndex("AsQpId");

                    b.HasIndex("AsQuestionBankId");

                    b.HasIndex("AsQuestionVersion");

                    b.ToTable("tblAssessmentBatch");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblAssessmentProof", b =>
                {
                    b.Property<int>("AsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("asID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AsAddharPhoto")
                        .HasColumnName("asAddharPhoto");

                    b.Property<string>("AsAssesser")
                        .HasColumnName("asAssesser")
                        .HasMaxLength(30);

                    b.Property<string>("AsCandidateId")
                        .HasColumnName("asCandidateId")
                        .HasMaxLength(50);

                    b.Property<byte[]>("AsPersonalPhoto")
                        .HasColumnName("asPersonalPhoto");

                    b.Property<int?>("AsbatchId")
                        .HasColumnName("asbatchID");

                    b.HasKey("AsId");

                    b.HasIndex("AsCandidateId");

                    b.HasIndex("AsbatchId");

                    b.ToTable("tblAssessmentProof");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblCandidateList", b =>
                {
                    b.Property<string>("ClEnrollmentNo")
                        .HasColumnName("clEnrollmentNo")
                        .HasMaxLength(50);

                    b.Property<string>("ClName")
                        .IsRequired()
                        .HasColumnName("clName")
                        .HasMaxLength(50);

                    b.Property<bool?>("ClPracticalDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clPracticalDone")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ClReqNo")
                        .HasColumnName("clReqNo");

                    b.Property<bool?>("ClTheoryDeone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clTheoryDeone")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ClEnrollmentNo");

                    b.ToTable("tblCandidateList");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblCenter", b =>
                {
                    b.Property<string>("CenterCode")
                        .HasColumnName("centerCode")
                        .HasMaxLength(20);

                    b.Property<string>("CenterAddress")
                        .HasColumnName("centerAddress")
                        .HasMaxLength(100);

                    b.Property<long>("CenterContactNo")
                        .HasColumnName("centerContactNo");

                    b.Property<string>("CenterContactPerson")
                        .HasColumnName("centerContactPerson")
                        .HasMaxLength(30);

                    b.Property<string>("CenterEmailId")
                        .HasColumnName("centerEmailID")
                        .HasMaxLength(40);

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasColumnName("centerName")
                        .HasMaxLength(40);

                    b.HasKey("CenterCode");

                    b.ToTable("tblCenter");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblFinalResult", b =>
                {
                    b.Property<int>("FrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("frID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FrCandidateId")
                        .IsRequired()
                        .HasColumnName("frCandidateId")
                        .HasMaxLength(50);

                    b.Property<int?>("FrFinalResult")
                        .HasColumnName("frFinalResult");

                    b.Property<int?>("FrPracticalId")
                        .HasColumnName("frPracticalID");

                    b.Property<int?>("FrPracticalResult")
                        .HasColumnName("frPracticalResult");

                    b.Property<int?>("FrTheoryId")
                        .HasColumnName("frTheoryID");

                    b.Property<int?>("FrTheoryResult")
                        .HasColumnName("frTheoryResult");

                    b.Property<int?>("FrbatchId")
                        .HasColumnName("frbatchID");

                    b.HasKey("FrId");

                    b.HasIndex("FrCandidateId");

                    b.HasIndex("FrPracticalId");

                    b.HasIndex("FrTheoryId");

                    b.HasIndex("FrbatchId");

                    b.ToTable("tblFinalResult");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblNos", b =>
                {
                    b.Property<string>("NosCode")
                        .HasColumnName("nosCode")
                        .HasMaxLength(50);

                    b.Property<bool>("NosActive")
                        .HasColumnName("nosActive");

                    b.Property<string>("NosName")
                        .IsRequired()
                        .HasColumnName("nosName")
                        .HasMaxLength(100);

                    b.Property<string>("NosQpCode")
                        .HasColumnName("nosQpCode")
                        .HasMaxLength(100);

                    b.HasKey("NosCode");

                    b.HasIndex("NosQpCode");

                    b.ToTable("tblNOS");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblPracticalQuestion", b =>
                {
                    b.Property<int>("PqCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pqCode")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PqLang")
                        .HasColumnName("pqLang")
                        .HasMaxLength(50);

                    b.Property<int>("PqMarks")
                        .HasColumnName("pqMarks");

                    b.Property<string>("PqNos")
                        .IsRequired()
                        .HasColumnName("pqNOS")
                        .HasMaxLength(50);

                    b.Property<string>("PqPc")
                        .HasColumnName("pqPC")
                        .HasMaxLength(100);

                    b.Property<string>("PqQuestion")
                        .IsRequired()
                        .HasColumnName("pqQuestion")
                        .HasMaxLength(500);

                    b.Property<string>("PqType")
                        .IsRequired()
                        .HasColumnName("pqType")
                        .HasMaxLength(30);

                    b.Property<string>("PqVersionOfQb")
                        .HasColumnName("pqVersionOfQB")
                        .HasMaxLength(12);

                    b.HasKey("PqCode");

                    b.HasIndex("PqNos");

                    b.HasIndex("PqVersionOfQb");

                    b.ToTable("tblPracticalQuestion");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblPracticalResult", b =>
                {
                    b.Property<int>("PrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrCandidateId")
                        .IsRequired()
                        .HasColumnName("prCandidateId")
                        .HasMaxLength(50);

                    b.Property<int?>("PrMarks")
                        .HasColumnName("prMarks");

                    b.Property<int?>("PrQuestionId")
                        .HasColumnName("prQuestionID");

                    b.Property<int?>("PrbatchId")
                        .HasColumnName("prbatchID");

                    b.HasKey("PrId");

                    b.HasIndex("PrCandidateId");

                    b.HasIndex("PrQuestionId");

                    b.HasIndex("PrbatchId");

                    b.ToTable("tblPracticalResult");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblProject", b =>
                {
                    b.Property<string>("ProjId")
                        .HasColumnName("projId")
                        .HasMaxLength(20);

                    b.Property<string>("ProjAssesmentType")
                        .HasColumnName("projAssesmentType")
                        .HasMaxLength(20);

                    b.Property<string>("ProjDesp")
                        .HasColumnName("projDesp")
                        .HasMaxLength(100);

                    b.Property<string>("ProjManager")
                        .IsRequired()
                        .HasColumnName("projManager")
                        .HasMaxLength(30);

                    b.Property<string>("ProjName")
                        .IsRequired()
                        .HasColumnName("projName")
                        .HasMaxLength(40);

                    b.HasKey("ProjId");

                    b.ToTable("tblProject");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblQp", b =>
                {
                    b.Property<string>("QpCode")
                        .HasColumnName("qpCode")
                        .HasMaxLength(100);

                    b.Property<bool>("QpActive")
                        .HasColumnName("qpActive");

                    b.Property<string>("QpMaxEdlevel")
                        .HasColumnName("qpMaxEDLevel")
                        .HasMaxLength(30);

                    b.Property<string>("QpMinEdlevel")
                        .HasColumnName("qpMinEDLevel")
                        .HasMaxLength(30);

                    b.Property<string>("QpName")
                        .IsRequired()
                        .HasColumnName("qpName")
                        .HasMaxLength(100);

                    b.Property<int>("QpNoOfNos")
                        .HasColumnName("qpNoOfNOS");

                    b.Property<int?>("QpNsqfLevel")
                        .HasColumnName("qpNsqfLevel");

                    b.Property<string>("QpSectorName")
                        .HasColumnName("qpSectorName")
                        .HasMaxLength(20);

                    b.HasKey("QpCode");

                    b.ToTable("tblQP");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblQuestionBank", b =>
                {
                    b.Property<string>("QbQuestionCode")
                        .HasColumnName("qbQuestionCode")
                        .HasComputedColumnSql("('QB'+CONVERT([nvarchar](10),[qbQuestionID]))")
                        .HasMaxLength(12);

                    b.Property<string>("QbName")
                        .IsRequired()
                        .HasColumnName("qbName")
                        .HasMaxLength(100);

                    b.Property<int>("QbQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("qbQuestionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QbRelatedQp")
                        .HasColumnName("qbRelatedQP")
                        .HasMaxLength(100);

                    b.HasKey("QbQuestionCode");

                    b.HasIndex("QbRelatedQp");

                    b.ToTable("tblQuestionBank");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblQuestionPaperVersion", b =>
                {
                    b.Property<string>("QvVersionCode")
                        .HasColumnName("qvVersionCode")
                        .HasComputedColumnSql("('QV'+CONVERT([nvarchar](10),[qvVersionID]))")
                        .HasMaxLength(12);

                    b.Property<bool?>("QvBangla")
                        .HasColumnName("qvBangla");

                    b.Property<bool?>("QvHindi")
                        .HasColumnName("qvHindi");

                    b.Property<string>("QvName")
                        .IsRequired()
                        .HasColumnName("qvName")
                        .HasMaxLength(50);

                    b.Property<string>("QvQbcode")
                        .HasColumnName("qvQBCode")
                        .HasMaxLength(12);

                    b.Property<bool?>("QvTamil")
                        .HasColumnName("qvTamil");

                    b.Property<string>("QvType")
                        .IsRequired()
                        .HasColumnName("qvType")
                        .HasMaxLength(30);

                    b.Property<int>("QvVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("qvVersionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("QvVersionCode");

                    b.HasIndex("QvQbcode");

                    b.ToTable("tblQuestionPaperVersion");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblTheoryQuestions", b =>
                {
                    b.Property<int>("TqCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tqCode")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TqCorrectAnswer")
                        .HasColumnName("tqCorrectAnswer");

                    b.Property<string>("TqLanguage")
                        .HasColumnName("tqLanguage")
                        .HasMaxLength(50);

                    b.Property<int>("TqMarks")
                        .HasColumnName("tqMarks");

                    b.Property<string>("TqOption1")
                        .IsRequired()
                        .HasColumnName("tqOption1");

                    b.Property<string>("TqOption2")
                        .IsRequired()
                        .HasColumnName("tqOption2");

                    b.Property<string>("TqOption3")
                        .IsRequired()
                        .HasColumnName("tqOption3");

                    b.Property<string>("TqOption4")
                        .IsRequired()
                        .HasColumnName("tqOption4");

                    b.Property<string>("TqQuestion")
                        .IsRequired()
                        .HasColumnName("tqQuestion");

                    b.Property<string>("TqVersionOfQb")
                        .HasColumnName("tqVersionOfQB")
                        .HasMaxLength(12);

                    b.HasKey("TqCode");

                    b.HasIndex("TqVersionOfQb");

                    b.ToTable("tblTheoryQuestions");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblTheoryResult", b =>
                {
                    b.Property<int>("TrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("trID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TrCandidateId")
                        .IsRequired()
                        .HasColumnName("trCandidateId")
                        .HasMaxLength(50);

                    b.Property<int?>("TrMarks1")
                        .HasColumnName("trMarks1");

                    b.Property<int?>("TrMarks10")
                        .HasColumnName("trMarks10");

                    b.Property<int?>("TrMarks11")
                        .HasColumnName("trMarks11");

                    b.Property<int?>("TrMarks12")
                        .HasColumnName("trMarks12");

                    b.Property<int?>("TrMarks13")
                        .HasColumnName("trMarks13");

                    b.Property<int?>("TrMarks14")
                        .HasColumnName("trMarks14");

                    b.Property<int?>("TrMarks15")
                        .HasColumnName("trMarks15");

                    b.Property<int?>("TrMarks16")
                        .HasColumnName("trMarks16");

                    b.Property<int?>("TrMarks17")
                        .HasColumnName("trMarks17");

                    b.Property<int?>("TrMarks18")
                        .HasColumnName("trMarks18");

                    b.Property<int?>("TrMarks19")
                        .HasColumnName("trMarks19");

                    b.Property<int?>("TrMarks2")
                        .HasColumnName("trMarks2");

                    b.Property<int?>("TrMarks20")
                        .HasColumnName("trMarks20");

                    b.Property<int?>("TrMarks3")
                        .HasColumnName("trMarks3");

                    b.Property<int?>("TrMarks4")
                        .HasColumnName("trMarks4");

                    b.Property<int?>("TrMarks5")
                        .HasColumnName("trMarks5");

                    b.Property<int?>("TrMarks6")
                        .HasColumnName("trMarks6");

                    b.Property<int?>("TrMarks7")
                        .HasColumnName("trMarks7");

                    b.Property<int?>("TrMarks8")
                        .HasColumnName("trMarks8");

                    b.Property<int?>("TrMarks9")
                        .HasColumnName("trMarks9");

                    b.Property<int?>("TrTotalMarks")
                        .HasColumnName("trTotalMarks");

                    b.Property<int?>("TrbatchId")
                        .HasColumnName("trbatchID");

                    b.HasKey("TrId");

                    b.HasIndex("TrCandidateId");

                    b.HasIndex("TrbatchId");

                    b.ToTable("tblTheoryResult");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblTotalPracticalMarks", b =>
                {
                    b.Property<int>("TpmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tpmID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TpmCandidateId")
                        .IsRequired()
                        .HasColumnName("tpmCandidateId")
                        .HasMaxLength(50);

                    b.Property<int>("TpmTotalMarks")
                        .HasColumnName("tpmTotalMarks");

                    b.Property<int?>("TpmbatchId")
                        .HasColumnName("tpmbatchID");

                    b.HasKey("TpmId");

                    b.HasIndex("TpmCandidateId");

                    b.HasIndex("TpmbatchId");

                    b.ToTable("tblTotalPracticalMarks");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblTrainingPartner", b =>
                {
                    b.Property<int>("TpCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tpCode")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("TpActive")
                        .HasColumnName("tpActive");

                    b.Property<string>("TpName")
                        .HasColumnName("tpName")
                        .HasMaxLength(50);

                    b.HasKey("TpCode");

                    b.ToTable("tblTrainingPartner");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblAssessmentBatch", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblCenter", "AsCenter")
                        .WithMany("TblAssessmentBatch")
                        .HasForeignKey("AsCenterId")
                        .HasConstraintName("FK_assecenterID");

                    b.HasOne("LSSCBackEnd.Models.TblProject", "AsProject")
                        .WithMany("TblAssessmentBatch")
                        .HasForeignKey("AsProjectId")
                        .HasConstraintName("FK_asseprojectID");

                    b.HasOne("LSSCBackEnd.Models.TblQp", "AsQp")
                        .WithMany("TblAssessmentBatch")
                        .HasForeignKey("AsQpId")
                        .HasConstraintName("FK_asQP");

                    b.HasOne("LSSCBackEnd.Models.TblQuestionBank", "AsQuestionBank")
                        .WithMany("TblAssessmentBatch")
                        .HasForeignKey("AsQuestionBankId")
                        .HasConstraintName("FK_qbID");

                    b.HasOne("LSSCBackEnd.Models.TblQuestionPaperVersion", "AsQuestionVersionNavigation")
                        .WithMany("TblAssessmentBatch")
                        .HasForeignKey("AsQuestionVersion")
                        .HasConstraintName("FK_QuestionVersion");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblAssessmentProof", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblCandidateList", "AsCandidate")
                        .WithMany("TblAssessmentProof")
                        .HasForeignKey("AsCandidateId")
                        .HasConstraintName("FK_candidateIDas");

                    b.HasOne("LSSCBackEnd.Models.TblAssessmentBatch", "Asbatch")
                        .WithMany("TblAssessmentProof")
                        .HasForeignKey("AsbatchId")
                        .HasConstraintName("FK_batchIDas");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblFinalResult", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblCandidateList", "FrCandidate")
                        .WithMany("TblFinalResult")
                        .HasForeignKey("FrCandidateId")
                        .HasConstraintName("FK_candidateIDfr");

                    b.HasOne("LSSCBackEnd.Models.TblTotalPracticalMarks", "FrPractical")
                        .WithMany("TblFinalResult")
                        .HasForeignKey("FrPracticalId")
                        .HasConstraintName("FK_PracticalResultIDfr");

                    b.HasOne("LSSCBackEnd.Models.TblTheoryResult", "FrTheory")
                        .WithMany("TblFinalResult")
                        .HasForeignKey("FrTheoryId")
                        .HasConstraintName("FK_theoryResultIDfr");

                    b.HasOne("LSSCBackEnd.Models.TblAssessmentBatch", "Frbatch")
                        .WithMany("TblFinalResult")
                        .HasForeignKey("FrbatchId")
                        .HasConstraintName("FK_batchIDfr");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblNos", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblQp", "NosQpCodeNavigation")
                        .WithMany("TblNos")
                        .HasForeignKey("NosQpCode")
                        .HasConstraintName("FK_nosQpConn");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblPracticalQuestion", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblNos", "PqNosNavigation")
                        .WithMany("TblPracticalQuestion")
                        .HasForeignKey("PqNos")
                        .HasConstraintName("FK_nosOfPQ");

                    b.HasOne("LSSCBackEnd.Models.TblQuestionPaperVersion", "PqVersionOfQbNavigation")
                        .WithMany("TblPracticalQuestion")
                        .HasForeignKey("PqVersionOfQb")
                        .HasConstraintName("FK_pqVersionID");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblPracticalResult", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblCandidateList", "PrCandidate")
                        .WithMany("TblPracticalResult")
                        .HasForeignKey("PrCandidateId")
                        .HasConstraintName("FK_candidateIDPR");

                    b.HasOne("LSSCBackEnd.Models.TblPracticalQuestion", "PrQuestion")
                        .WithMany("TblPracticalResult")
                        .HasForeignKey("PrQuestionId")
                        .HasConstraintName("FK_questionIDPR");

                    b.HasOne("LSSCBackEnd.Models.TblAssessmentBatch", "Prbatch")
                        .WithMany("TblPracticalResult")
                        .HasForeignKey("PrbatchId")
                        .HasConstraintName("FK_batchIDPR");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblQuestionBank", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblQp", "QbRelatedQpNavigation")
                        .WithMany("TblQuestionBank")
                        .HasForeignKey("QbRelatedQp")
                        .HasConstraintName("FK_qbQpConn");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblQuestionPaperVersion", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblQuestionBank", "QvQbcodeNavigation")
                        .WithMany("TblQuestionPaperVersion")
                        .HasForeignKey("QvQbcode")
                        .HasConstraintName("FK_QBCode");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblTheoryQuestions", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblQuestionPaperVersion", "TqVersionOfQbNavigation")
                        .WithMany("TblTheoryQuestions")
                        .HasForeignKey("TqVersionOfQb")
                        .HasConstraintName("FK_versionID");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblTheoryResult", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblCandidateList", "TrCandidate")
                        .WithMany("TblTheoryResult")
                        .HasForeignKey("TrCandidateId")
                        .HasConstraintName("FK_candidate");

                    b.HasOne("LSSCBackEnd.Models.TblAssessmentBatch", "Trbatch")
                        .WithMany("TblTheoryResult")
                        .HasForeignKey("TrbatchId")
                        .HasConstraintName("FK_batchID");
                });

            modelBuilder.Entity("LSSCBackEnd.Models.TblTotalPracticalMarks", b =>
                {
                    b.HasOne("LSSCBackEnd.Models.TblCandidateList", "TpmCandidate")
                        .WithMany("TblTotalPracticalMarks")
                        .HasForeignKey("TpmCandidateId")
                        .HasConstraintName("FK_candidateIDtpm");

                    b.HasOne("LSSCBackEnd.Models.TblAssessmentBatch", "Tpmbatch")
                        .WithMany("TblTotalPracticalMarks")
                        .HasForeignKey("TpmbatchId")
                        .HasConstraintName("FK_batchIDtpm");
                });
#pragma warning restore 612, 618
        }
    }
}
